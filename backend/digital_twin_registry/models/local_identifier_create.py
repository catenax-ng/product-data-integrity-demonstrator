# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from digital_twin_registry.dependencies import MyBaseModel


class LocalIdentifierSearch(MyBaseModel):
    key: Optional[str]
    value: str
    type: Optional[str]

class LocalIdentifierCreate(MyBaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    LocalIdentifierCreate - a model defined in OpenAPI

        key: The key of this LocalIdentifierCreate.
        value: The value of this LocalIdentifierCreate.
    """

    key: str
    value: str

    @validator("key")
    def key_min_length(cls, value):
        assert len(value) >= 2
        return value

    @validator("key")
    def key_max_length(cls, value):
        assert len(value) <= 200
        return value

    @validator("value")
    def value_min_length(cls, value):
        assert len(value) >= 2
        return value

    @validator("value")
    def value_max_length(cls, value):
        assert len(value) <= 200
        return value

LocalIdentifierCreate.update_forward_refs()
